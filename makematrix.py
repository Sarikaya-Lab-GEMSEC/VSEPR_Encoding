# -*- coding: utf-8 -*-
"""
Created on Mon Jul  9 15:20:38 2018

@author: jtfl2
"""

import numpy as np

ElementSymbols = 'H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn, Fr, Ra, Ac, Th, Pa, U, Np, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr, Rf, Db, Sg, Bh, Hs, Mt, Uun, Uuu, Uub, Uut, Uuq, Uup, Uuh, Uus, Uuo'.split(', ')
greek = ' ,A,B,D,E,G,Z,X,T,H'.split(',')

#       initializes a large (n x n) matrix
def makemajormatrix(matrix, n, index = 0):
    base = np.zeros((n,n))
    base[0:(matrix.shape[0]),0:(matrix.shape[1])] = matrix
    col = 0
    row = 0
    while sum(base[row,:]) != 0:
        row = row + 1
    return [row, col, base]

#       adds matricies to the initialized base generated by makemajormatrix
#       at the moment only can add them down, for the purpose of encoding
#       amino acids down is the only needed one
def addmatrix(base, row, col, addition, dirrection = 'down' , n = 100):
    size = addition.shape
    if row + size[0] > n or col + size[1] > n:
       while row + size[0] > n or col + size[1] > n:
           n = n + 100    
       [row,col,base] = makemajormatrix(base, n)
    if dirrection == 'down':
        base[row:row+size[0],col:col+size[1]] = addition
        return [row+size[0],col, base, n]
#    elif dirrection == 'right':
#        newCol = 0
#        while sum(base[:,newCol]) != 0:
#            newCol = newCol+1
#        base[0:size[0],newCol:newCol+size[1]] = addition
#        return [row, col, base, n]
#    elif dirrection == 'left':
#        base = cleanmatrix(base)
#        newBase = np.zeros((n,n))
#        newBase[0:base.shape[0], size[1]:size[1]+base.shape[1]] = base
#        newBase[row-size[0]:row, 0:size[1]] = addition
#        return [row,col + size[1] ,newBase, n]
   
    
#       cleans the matrix to be only the size it needs to be with no extra 0's 
#       on the bottom or side, also is used when the size of the majormatrix
#       isn't large enough to hold the entire peptide              
def cleanmatrix(base):
    row = 0
    col = 0
    while sum(base[row,:]) != 0:
        row = row + 1
        if base.shape[0] == row:
                [row1,col1,base] = makemajormatrix(base, 2*row)
        while sum(base[:,col]) != 0:
            col = col + 1
            if base.shape[1] == col:
                [row1,col1,base] = makemajormatrix(base, 2*col)
    return base[0:row,0:col]


#
def makeatom(atom_type, lp, charge, bond_amounts, bond_type, bond_lengths, bond_angles, order, c_term):
    newBond_type = []
    for j in bond_type:
        if j == 0:
            newBond_type.append(j)
        else:
            name = list(j)
            numName = '' + str(ElementSymbols.index(name[0]) + 1) + '.' + str(order)
            for i in range(1,len(name)):
                if name[i] in greek:
                    numName = str(numName) + str(greek.index(name[i]))
                else:
                    numName = str(numName) + str(name[i])
                listname = list(str(numName))  
                if listname[0] == '1' and listname[-2:] == ['7','8']:
                    if not c_term:
                        numName =  float(str(ElementSymbols.index('N') + 1)) + float('0.' + str(order + 1))
                    else:
                        numName =  float(str(ElementSymbols.index('O') + 1)) +float('0.' + str(order) + '2')           
            newBond_type.append(float(numName))
    
    name = list(atom_type)
    numName = '' + str(ElementSymbols.index(name[0]) + 1) + '.' + str(order)
    for i in range(1,len(name)):
        if name[i] in greek:
            numName = str(numName) + str(greek.index(name[i]))
        else:
            numName = str(numName) + str(name[i])
    
    listname = list(str(numName))        
    if listname[0] == '1' and listname[-2:] == ['7','8']:
        numName =  float(str(ElementSymbols.index('O') + 1)) + float('0.' + str(order) + '2') 
        
    if order == 0 and atom_type == 'C':
        for i in range(len(newBond_type)):
            if newBond_type[i] == float(str(ElementSymbols.index('N') + 1)) + float('0.' + str(order + 1)):
                bond_lengths[i] = 1.47
                
    if order != 0 and atom_type == 'N':
        skip = True
        for i in range(len(newBond_type)):
            if newBond_type[i] == 1 + float('0.' + str(order)):
                skip = not skip
                if skip:
                    bond_lengths[i] = 1.47
                    newBond_type[i] = 6 + float('0.' + str(order - 1))
                    
        
    i = np.zeros((5, max(len(bond_amounts), len(newBond_type), len(bond_lengths), len(bond_angles))))
    i[0,0] = numName
    i[0,1] = lp
    i[0,2] = charge
    i[1,0:len(bond_amounts)] = bond_amounts
    i[2,0:len(newBond_type)] = newBond_type
    i[3,0:len(bond_lengths)] = bond_lengths
    i[4,0:len(bond_angles)] = bond_angles
    return i


    